version: "3"

services: 

  frontend:
    build: ./frontend
    command: ["yarn", "start"]
    container_name: frontend
    ports:
      - 3000:3000
    volumes:
      - ./frontend:/frontend
      - build_folder:/frontend/build
      - ./frontend/node_modules/:/frontend/node_modules
    # environment:
      # - CI=true
      # - CHOKIDAR_USEPOLLING=true    # HMR을 위해 필요한 설정
      # - REACT_APP_BACKEND_URL=http://localhost:8000
    stdin_open: true      # react-script 3.4.1 부터 필요
    tty: true
    # 가상 네트워크 연결
    networks:
      - gd

  backend:
    container_name: backend
    build:
      context: ./backend
      args:
        DJANGO_ALLOWED_HOSTS: "*"
        DJANGO_SECRET_KEY: "*"
        DJANGO_CORS_ORIGIN_WHITELIST: "*"
    command: >
      bash -c "python3 manage.py makemigrations gdiary &&
                python3 manage.py makemigrations text && 
                python3 manage.py migrate gdiary &&
                python3 manage.py migrate text &&
                gunicorn --bind :8000 config.wsgi:application"
    # decode.py, makemigrations, migrate 따로 해야함
    restart: on-failure
    ports:
      - 8080:8000
    volumes:
      - ./backend:/backend
      - static_volume:/backend/staticfiles
      - media_volume:/backend/mediafiles
    # depends_on:
    #   - rabbitmq
    # expose:
    #   - 8000
    # 가상 네트워크 연결
    networks:
      - gd

  # mysql:
  #   image: mysql
  #   command: --lower_case_table_names=1
  #   container_name: mysql # 컨테이너 이름 설정
  #   ports:
  #     - "3307:3306"
  #   env_file:
  #     - ./backend/.env
  #   networks:
  #     - gd

  rabbitmq:
    hostname: localhost
    container_name: rabbitmq
    image: rabbitmq:3-management
    command: rabbitmq-server
    restart: unless-stopped
    environment:
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
    ports:
      - 5672:5672 # Default Port
      - 15672:15672 # For UI
    volumes:
      - ./backend:/backend
    networks:
      - gd
    depends_on:
      - backend
    expose:
      - "15672"

  celery:
    container_name: celery
    build:
      context: ./backend
    restart: unless-stopped
    depends_on:
      - backend
      - rabbitmq
    volumes:
      - ./backend:/backend
    networks:
      - gd
    command: "celery -A config.celery worker --loglevel=info --pool=solo"


  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - 8000:80
    restart: always
    volumes:
      - static_volume:/backend/staticfiles
      - media_volume:/backend/mediafiles
      - build_folder:/var/www/frontend
    depends_on:
      - backend
      - frontend
    # 가상 네트워크 연결
    networks:
      - gd

networks:
  gd:
    driver: bridge

volumes:
  static_volume: null
  media_volume: null
  build_folder: null