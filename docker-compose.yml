# 도커파일은 빌드할때 반영
# 도커컴포즈는 업할때 반영
version: "3"

services:
  gd_frontend:
    container_name: gd_frontend
    restart: unless-stopped
    build:
      context: ./frontend
    command: ["yarn", "start"]
    ports:
      - 3000:3000
    volumes:
      - ./frontend/:/frontend/
      - ./frontend/node_modules/:/frontend/node_modules
    environment:
      - CI=true
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_BACKEND_URL=http://localhost:8000
    tty: true

  gd_backend:
    build:
      # context : 현재 폴더의 backend 폴더에 있는 도커파일을 쓰겠다.
      context: ./backend
      args:
        DJANGO_ALLOWED_HOSTS: "*"
        DJANGO_SECRET_KEY: "*"
        DJANGO_CORS_ORIGIN_WHITELIST: "*"
    container_name: gd_backend
    # command : 컨테이너가 띄워질 때 실행하는 명령어 / 서버실행
    command: sh -c "/wait & python manage.py makemigrations gdiary && python manage.py makemigrations text && python manage.py migrate gdiary && python manage.py runserver 0.0.0.0:8000"
    # restart : 실패하면 재시작
    restart: on-failure
    ports:
      # 왼쪽이 도커 바깥(외부에서 접근할 포트번호) / 오른쪽이 도커 내부(컨테이너 내부)
      - 8000:8000
    volumes:
      # 왼쪽이 우리 컴퓨터, 오른쪽이 도커 컨테이너
      # 리눅스 컨테이너의 백엔드 폴더에 우리 컴퓨터의 백엔드 폴더를 공유하겠다.
      # 서로 바뀐 부분 적용됨
      - ./backend:/backend
    # 가상 네트워크 연결
    networks:
      - gd
    depends_on:
      - gd_mysql

  gd_mysql:
    image: mysql
    command:
      - --lower_case_table_names=1
    container_name: gd_mysql # 컨테이너 이름 설정
    ports:
      # 도커:로컬
      - "3307:3306"
    env_file:
      - ./backend/.env
    # environment: # -e 옵션
    #   - MYSQL_DATABASE=${MYSQL_DATABASE}
    #   - MYSQL_USER=${MYSQL_USER}
    #   - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}  # MYSQL 패스워드 설정 옵션
    # 가상 네트워크 연결
    networks:
      - gd
  gd_rabbitmq:
      hostname: localhost
      container_name: gd_rabbitmq
      image: rabbitmq:3-management
      command: rabbitmq-server
      restart: unless-stopped
      # env_file:
      #   - ./.env
      environment:
        - RABBITMQ_USER=guest
        - RABBITMQ_PASSWORD=guest
      ports:
        - 5672:5672 # Default Port
        - 15672:15672 # For UI
      volumes:
        - ./backend:/backend
      networks:
        - gd
      depends_on:
        - gd_backend
      expose:
        - "15672"

  gd_celery:
    container_name: gd_celery
    build:
      context: ./backend
    restart: unless-stopped
#    env_file:
#      - ./.env
    depends_on:
      - gd_backend
      - gd_rabbitmq
    volumes:
      - ./backend:/backend
    networks:
      - gd
    command: "celery -A config.celery worker --loglevel=info --pool=solo"
    
networks:
  gd:
    driver: bridge
