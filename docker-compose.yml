# 도커파일은 빌드할때 반영
# 도커컴포즈는 업할때 반영
version: "3"

services:
  gd_frontend:
    container_name: gd_frontend
    restart: unless-stopped
    build:
      context: ./frontend
    command: ["yarn", "start"]
    ports:
      - 3000:3000
    volumes:
      - ./frontend/:/frontend/
      - ./frontend/node_modules/:/frontend/node_modules
    environment:
      - CI=true
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_BACKEND_URL=http://localhost:8000
    tty: true

  gd_backend:
    build:
      # context : 현재 폴더의 backend 폴더에 있는 도커파일을 쓰겠다.
      context: ./backend
      args:
        DJANGO_ALLOWED_HOSTS: "*"
        DJANGO_SECRET_KEY: "*"
        DJANGO_CORS_ORIGIN_WHITELIST: "*"
    container_name: gd_backend
    # command : 컨테이너가 띄워질 때 실행하는 명령어 / 서버실행
    command: sh -c "/wait & python manage.py makemigrations gdiary && python manage.py migrate gdiary && python manage.py runserver 0.0.0.0:8000"
    # restart : 실패하면 재시작
    restart: on-failure
    ports:
      # 왼쪽이 도커 바깥(외부에서 접근할 포트번호) / 오른쪽이 도커 내부(컨테이너 내부)
      - 8000:8000
    volumes:
      # 왼쪽이 우리 컴퓨터, 오른쪽이 도커 컨테이너
      # 리눅스 컨테이너의 백엔드 폴더에 우리 컴퓨터의 백엔드 폴더를 공유하겠다.
      # 서로 바뀐 부분 적용됨
      - ./backend:/backend
    # 가상 네트워크 연결
    networks:
      - gd
    depends_on:
      - gd_mysql

  gd_mysql:
    image: mysql
    command:
      - --lower_case_table_names=1
    container_name: gd_mysql # 컨테이너 이름 설정
    ports:
      # 도커:로컬
      - "3307:3306"
    env_file:
      - ./backend/.env
    # environment: # -e 옵션
    #   - MYSQL_DATABASE=${MYSQL_DATABASE}
    #   - MYSQL_USER=${MYSQL_USER}
    #   - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}  # MYSQL 패스워드 설정 옵션
    # 가상 네트워크 연결
    networks:
      - gd

  # nginx:
  #   build: ./nginx
  #   container_name: nginx
  #   ports:
  #     - 80:8080
  #   restart: unless-stopped
  #   volumes:
  #     - static_volume:/backend/staticfiles
  #     - media_volume:/backend/mediafiles
  #     - build_folder:/var/www/frontend
  #   depends_on:
  #     - gd_backend
  #   networks:
  #     - gd

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ./prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      # - '--storage.tsdb.retention.time=200h'
      # - '--web.enable-lifecycle'
    ports:
      - 9090:9090
    # links:
    #   - cadvisor:cadvisor
    #   - alertmanager:alertmanager
    depends_on:
      - cadvisor
    networks:
      - gd
    restart: always

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    restart: always
    networks:
      - gd
    deploy:
      mode: global

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - gd
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.45.0
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      # - /etc/machine-id:/etc/machine-id:ro
      # - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro
    ports:
      - 8080:8080
    networks:
      - gd
    restart: always
    # deploy:
    #   mode: global
    #   restart_policy:
    #     condition: on-failure

  grafana:
    image: grafana/grafana
    # user: "472"
    depends_on:
      - prometheus
    ports:
      - 3001:3000
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - gd
    restart: always

networks:
  gd:
    driver: bridge
